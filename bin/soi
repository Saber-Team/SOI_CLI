#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var resolve = require('resolve');

var NODE_PATH = process.env.NODE_PATH;

// This wrapper only resolves which instance of soi should be run.
// All the logic is in the main SOI module.
// The resolving algorithm checks (in this order):
//   - a local module (using `require`, so it will traverse up, looking for `node_modules/soi`),
//   - a siblink module to soi-cli (that loads the global soi, when using NVM),
//   - a global module (NODE_PATH)


var requireCliAndRun = function(soiPath) {
  if (process.argv.indexOf('--which') !== -1) {
    console.log(soiPath);
  } else {
    var soi = require(path.join(soiPath, 'lib', 'cli'));

    if (soi.run) {
      soi.run();
    } else {
      soiCliRun(soi, soiPath);
    }
  }
};


// TODO remove once we don't care about Karma 0.10
var soiCliRun = function(soi, soiPath) {
  //var config = soi.process();
/*
  switch (config.cmd) {
    case 'run':
      require(path.join(soiPath, 'lib', 'runner')).run(config);
      break;
    case 'init':
      require(path.join(soiPath, 'lib', 'init')).init(config);
      break;
  }*/
};


resolve('soi', { basedir: process.cwd() }, function(err, path2soi) {
  // There is a local version, let's use it.
  if (!err) {
    return requireCliAndRun(path2soi.replace(/(\/|\\)lib(\/|\\)index\.js/, ''));
  }

  // We can't load a global one, since NODE_PATH is not defined.
  if (!NODE_PATH) {
    // Let's try a siblink to soi-cli, that is a global module with NVM.
    var siblinkSOI = path.normalize(path.join(__dirname, '..', '..', 'soi'));
    if (fs.existsSync(siblinkSOI)) {
      return requireCliAndRun(siblinkSOI);
    }

    console.error('Cannot find local SOI!\n' +
                  '  Please install SOI by `npm install soi --save-dev`.\n' +
                  '  If you wanna use a global instance, please set NODE_PATH env variable.\n');
    return;
  }

  // Let's try global paths.
  var globalPaths = NODE_PATH.split(path.delimiter);
  var globalsoi;

  while (globalPaths.length) {
    globalsoi = path.normalize(path.join(globalPaths.shift(), 'soi'));
    if (fs.existsSync(globalsoi)) {
      return requireCliAndRun(globalsoi);
    }
  }

  console.error('Cannot find local soi!\n' +
                '  Please install soi by `npm install soi --save-dev`.\n');
});
